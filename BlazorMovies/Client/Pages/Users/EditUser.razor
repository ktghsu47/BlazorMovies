@page "/users/edit/{userId}"
@inject IUserRepository repoUser
@inject IDisplayMessage msg
@attribute [Authorize(Roles = "Admin")]

<h3>Edit User</h3>

<div class="form-inline">
    <select class="form-control mb-2 mr-sm-2" @bind="selectedRole">
        <option value="0">--Select a role--</option>
        @foreach (var role in roleDTOs) {
            <option value="@role.RoleName">@role.RoleName</option>
        }
    </select>

    <button class="btn btn-info mb-2 mr-sm-2" @onclick="AssignRole">Assign Role</button>
    <button class="btn btn-danger mb-2 mr-sm-2" @onclick="RemoveRole">Remove Role</button>
</div>

@code {
    [Parameter] public string UserId { get; set; }
    private List<RoleDTO> roleDTOs = new List<RoleDTO>();
    private string selectedRole = "0";

    protected override async Task OnInitializedAsync() {
        roleDTOs = await repoUser.GetRoles();
        selectedRole = (await repoUser.GetRoleByUserId(Convert.ToInt32(UserId))).RoleName;
    }

    private async Task AssignRole() {
        if (selectedRole == "0") {
            await msg.DisplayErrorMessage("You must select a role");
            return;
        }

        await repoUser.AssignRole(new EditRoleDTO() { RoleName = selectedRole, UserId = UserId });
        await msg.DisplaySuccessMessage("Role assigned");
    }

    private async Task RemoveRole() {
        if (selectedRole == "0") {
            await msg.DisplayErrorMessage("You must select a role");
            return;
        }

        await repoUser.RemoveRole(new EditRoleDTO() { RoleName = selectedRole, UserId = UserId });
        await msg.DisplaySuccessMessage("Role removed");
    }
}