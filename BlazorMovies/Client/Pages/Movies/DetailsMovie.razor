@page "/movie/{MovieId:int}"
@page "/movie/{MovieId:int}/{MovieName}"
@inject IMovieRepository repoMovie
@inject IRatingRepository repoRating
@inject IDisplayMessage msg

@if (detailsMovieDTO == null) {
    <text>Loading...</text>
} else {
    <h2>@detailsMovieDTO.Movie.Title (@detailsMovieDTO.Movie.ReleaseDate.Value.ToString("yyyy"))</h2>
    for (int i = 0; i < detailsMovieDTO.Genres.Count; i++) {
        if (i < detailsMovieDTO.Genres.Count - 1) {
            @linkGenre(detailsMovieDTO.Genres[i])<text>, </text>
        } else {
            @linkGenre(detailsMovieDTO.Genres[i])
        }
    }
    <text> | </text> <span>@detailsMovieDTO.Movie.ReleaseDate.Value.ToString("dd MMM yyyy")</span>
    <text> | Average: </text> @detailsMovieDTO.AverageVote.ToString("0.#") <text>/5 | Your vote: </text>
    <Rating MaximumRating="5" SelectedRating="detailsMovieDTO.UserVote" OnVote="OnVote" />

    <div style="display: flex">
        <span style="display: inline-block; margin-right: 5px;"><img src="@detailsMovieDTO.Movie.Poster" style="width: 225px; height: 315px" /></span>
        <iframe width="560" height="315" src="https://www.youtube.com/embed/@detailsMovieDTO.Movie.Trailer" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
    </div>
    <div style="margin-top: 10px;">
        <h3>Summary</h3>
        <div>
            <RenderMarkdown MarkdownContent="@detailsMovieDTO.Movie.Summary" />
        </div>
    </div>
    <div style="margin-top: 10px;">
        <h3>Actors</h3>
        <div style="display: flex; flex-direction: column">
            @foreach (var actor in detailsMovieDTO.Actors) {
                <div style="margin-bottom: 2px;">
                    <img style="width: 50px;" src="@actor.Picture" />
                    <span style="display:inline-block;width: 200px;">
                        <AuthorizeView Roles="Admin">
                            <Authorized>
                                <a href="/person/edit/@actor.Id">@actor.Name</a>
                            </Authorized>
                            <NotAuthorized>
                                @actor.Name
                            </NotAuthorized>
                        </AuthorizeView>
                    </span>
                    <span style="display:inline-block; width: 45px;">...</span>
                    <span>@actor.Character</span>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public int MovieId { get; set; }
    [Parameter] public string MovieName { get; set; }
    private RenderFragment<Genre> linkGenre = (genre) =>@<a href="movies/search?genreId=@genre.Id" > @genre.Name </a>;
    DetailsMovieDTO detailsMovieDTO;

    protected async override Task OnInitializedAsync() {
        detailsMovieDTO = await repoMovie.GetDetailsMovieDTO(MovieId);
    }

    private async Task OnVote(int selectedRate) {
        detailsMovieDTO.UserVote = selectedRate;
        var movieRating = new MovieRating() { Rate = selectedRate, MovieId = MovieId };
        await repoRating.Vote(movieRating);
        await msg.DisplaySuccessMessage("Your vote have been received!");
    }
}