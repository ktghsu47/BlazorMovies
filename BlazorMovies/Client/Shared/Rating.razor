@inject IDisplayMessage msg

@for (int i = 1; i <= MaximumRating; i++) {
    var starNumber = i;
    <span style="cursor:pointer;" class="fa fa-star @(SelectedRating >= i ? "checked" : null)"
          @onclick="@(() => onClickHandle(starNumber))" @onmouseover="@(() => onMouseoverHandle(starNumber))" />
}

@code {
    [Parameter] public int MaximumRating { get; set; }
    [Parameter] public int SelectedRating { get; set; }
    [Parameter] public EventCallback<int> OnVote { get; set; }
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }

    private bool voted = false;

    private async Task onClickHandle(int starNumber) {
        var authState = await AuthenticationState;
        var user = authState.User;

        if (!user.Identity.IsAuthenticated) {
            await msg.DisplayErrorMessage("You must login in order to vote");
            return;
        }

        SelectedRating = starNumber;
        voted = true;
        await OnVote.InvokeAsync(SelectedRating);
    }

    private void onMouseoverHandle(int starNumber) {
        if (!voted) {
            SelectedRating = starNumber;
        }
    }
}